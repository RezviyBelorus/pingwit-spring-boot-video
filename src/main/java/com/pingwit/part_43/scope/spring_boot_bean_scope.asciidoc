= Spring Boot bean scope

Когда вы создаете bean definition, вы создаёте рецепт для создания реальных экземпляров класса, определённого этим bean. Идея о том, что bean definition — это рецепт, важна, потому что это означает, что, как и с использованием оператора new, вы можете создать много экземпляров объекта из одного рецепта.

Вы можете контролировать не только различные зависимости и value конфигурации, которые будут подключены к объекту, созданному из конкретного определения bean, но также и управлять областью видимости объектов, создаваемых из этого bean definition.

Этот подход мощный и гибкий, потому что вы можете выбрать область видимости создаваемых объектов через конфигурацию, а не задавать область видимости на уровне класса Java.

Beans могут быть определены для развёртывания в одной из нескольких областей видимости (scope). Spring Framework поддерживает шесть областей видимости, четыре из которых доступны только при использовании web-aware ApplicationContext. Также можно создать пользовательскую область видимости.


https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html[Ссылка на официальную документацию Spring Boot]

Таблица из документации Spring boot


|===
|Scope |Description

|singleton
|(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.

|prototype
|Scopes a single bean definition to any number of object instances.

|request
|Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext.

|session
|Scopes a single bean definition to the lifecycle of an HTTP Session. Only valid in the context of a web-aware Spring ApplicationContext.

|application
|Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext.

|websocket
|Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext.
|===


=== Examples

1.Bean scope *singleton* (default)

[source,java]
----
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

@Service
// отсутствие указания scope = Singleton
public class MyService {
    private final MyRepository repository;

    public MyService(MyRepository repository) {
        this. repository = repository;
    }
}
----


2.Bean scope *prototype*

[source,java]
----
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

@Service
@Scope("prototype")
public class MyService {
    private final MyRepository repository;

    public MyService(MyRepository repository) {
        this. repository = repository;
    }
}
----